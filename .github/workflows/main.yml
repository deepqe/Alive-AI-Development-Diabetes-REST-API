name: Build and Deploy to Cloud Run

on:
  push:
    branches:
    - main

  workflow_dispatch : 

env:
  PROJECT_ID: feisty-legend-179317 # TODO: update Google Cloud project id
  GAR_LOCATION: us-central1 # TODO: update Artifact Registry location
  REGION: us-central1 # TODO: update Cloud Run service region
  REPO:  genai-dev

jobs:
  deploy_Diabetes_Unit_Converter_Services:
    name: Diabetes_Unit_Converter_Services
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    env:
      SERVICE: diabetes-unit-converter-services # TODO: update Cloud Run service name
    steps:
  
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            Diabetes_Unit_Converter_Services:
              - 'Diabetes_Unit_Converter_Services/**' 

      #- name: Google Auth
      #  id: auth
      #  uses: 'google-github-actions/auth@v0'
      #  with:
      #    token_format: 'access_token'
      #    workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #    service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        if: steps.filter.outputs.Diabetes_Unit_Converter_Services == 'true'
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      #- name: Docker Auth
      #  id: docker-auth
      #  uses: 'docker/login-action@v1'
      #  with:
      #    username: 'oauth2accesstoken'
      #    password: '${{ steps.auth.outputs.access_token }}'
      #    registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        if: steps.filter.outputs.Diabetes_Unit_Converter_Services == 'true'
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build --build-arg APP_DIR=Diabetes_Unit_Converter_Services --build-arg SERVICE_NAME=Unit_Converter_Services -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        if: steps.filter.outputs.Diabetes_Unit_Converter_Services == 'true'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}
          port: 5000
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        if: steps.filter.outputs.Diabetes_Unit_Converter_Services == 'true'
        run: echo ${{ steps.deploy.outputs.url }}


################################################# Diabetes_Category_Prediction_Services ########################################### 

  deploy_Diabetes_Category_Prediction_Services:
    name: Diabetes_Category_Prediction_Services
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    env:
      SERVICE: diabetes-category-prediction-services # TODO: update Cloud Run service name
    steps:
  
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            Diabetes_Category_Prediction_Services:
              - 'Diabetes_Category_Prediction_Services/**' 

      #- name: Google Auth
      #  id: auth
      #  uses: 'google-github-actions/auth@v0'
      #  with:
      #    token_format: 'access_token'
      #    workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #    service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        if: steps.filter.outputs.Diabetes_Category_Prediction_Services == 'true'
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      #- name: Docker Auth
      #  id: docker-auth
      #  uses: 'docker/login-action@v1'
      #  with:
      #    username: 'oauth2accesstoken'
      #    password: '${{ steps.auth.outputs.access_token }}'
      #    registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        if: steps.filter.outputs.Diabetes_Category_Prediction_Services == 'true'
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build --build-arg APP_DIR=Diabetes_Category_Prediction_Services --build-arg SERVICE_NAME=Diabetes_Prediction_Services -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        if: steps.filter.outputs.Diabetes_Category_Prediction_Services == 'true'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}
          port: 5000
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        if: steps.filter.outputs.Diabetes_Category_Prediction_Services == 'true'
        run: echo ${{ steps.deploy.outputs.url }}


################################################# Diabetes_Category_Prediction_Services ########################################### 

  deploy_Cholesterol_Level_Prediction_Services:
    name: Cholesterol_Level_Prediction_Services
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest

    env:
      SERVICE: cholesterol-level-prediction-services # TODO: update Cloud Run service name
    steps:

      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            Cholesterol_Level_Prediction_Services:
              - 'Cholesterol_Level_Prediction_Services/**' 

      #- name: Google Auth
      #  id: auth
      #  uses: 'google-github-actions/auth@v0'
      #  with:
      #    token_format: 'access_token'
      #    workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
      #    service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      # NOTE: Alternative option - authentication via credentials json
      - name: Google Auth
        if: steps.filter.outputs.Cholesterol_Level_Prediction_Services == 'true'
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
         credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      #- name: Docker Auth
      #  id: docker-auth
      #  uses: 'docker/login-action@v1'
      #  with:
      #    username: 'oauth2accesstoken'
      #    password: '${{ steps.auth.outputs.access_token }}'
      #    registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Build and Push Container
        if: steps.filter.outputs.Cholesterol_Level_Prediction_Services == 'true'
        run: |-
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build --build-arg APP_DIR=Cholesterol_Level_Prediction_Services --build-arg SERVICE_NAME=Cholesterol_Level_Services -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        if: steps.filter.outputs.Cholesterol_Level_Prediction_Services == 'true'
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}:${{ github.sha }}
          port: 5000
      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        if: steps.filter.outputs.Cholesterol_Level_Prediction_Services == 'true'
        run: echo ${{ steps.deploy.outputs.url }}
